Given an unsorted array that contains even number of occurrences for all numbers except
two numbers. Find the two numbers which have odd occurrences in O(n) time complexity
and O(1) extra space.

Input Format
8
12 23 34 12 12 23 12 45

Constraints
Given input should be an array

Output Format
34 45

Sample Input 
10
4 4 100 5000 4 4 4 4 100 100

Sample Output 
100 5000


import java.util.Scanner;

class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read array size
        int n = scanner.nextInt();
        int[] arr = new int[n];

        // Read array elements
        for (int i = 0; i < n; i++) {
            arr[i] = scanner.nextInt();
        }

        // Find the XOR of all elements
        int xorResult = 0;
        for (int i = 0; i < n; i++) {
            xorResult ^= arr[i];
        }

        // Find a set bit in the XOR result
        int setBit = xorResult & -xorResult;

        // Initialize the two odd-occurrence numbers
        int num1 = 0;
        int num2 = 0;

        // Partition the array based on the set bit and XOR the elements
        for (int i = 0; i < n; i++) {
            if ((arr[i] & setBit) == 0) {
                num1 ^= arr[i];
            } else {
                num2 ^= arr[i];
            }
        }

        // Print the two odd-occurrence numbers
        System.out.println(num2 + " " + num1);

        scanner.close();
    }
}
